package com.project.application.theory.kotlininaction

//Class to practice with code from the book "Kotlin In Action"
class BookClassUniversalMethods

/*
* In Kotlin the equals fun compares the value of two objects, not its references, by default.
* The operator === can be used to compare references to objects.
* Hashcode fun should always be overriden together with equals fun.
* */
private class Client(val name: String, val postalCode: Int) {
    override fun equals(other: Any?): Boolean {
        if(other == null || other !is Client)
            return false
        return name == other.name &&
                postalCode == other.postalCode
    }
    override fun toString(): String = "Client(name=$name, postalCode=$postalCode"

    override fun hashCode(): Int = name.hashCode() * 31 + postalCode
}

/*
* By using the data reserved word before class declaration
* all the necessary methods (toString, equals, hashCode, ...)
* are automatically generated by the compiler
* */
private data class ClientDC(val name: String, val postalCode: Int)

/*
* When the data reserved word is used on class declaration,
* the compiler will automatically implement the copy method.
* It returns a copy of the class with the possibility of changing
* the value of properties.
* */
private fun copyClientDCDefault() = ClientDC("name", 0).copy()

private fun copyClientChangeProperty() = ClientDC("name", 0).copy(name = "new name")